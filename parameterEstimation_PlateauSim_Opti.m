function [pOpt, Info] = parameterEstimation_PlateauSim_Opti(p,Data)
%PARAMETERESTIMATION_PLATEAUSIM_OPTI
%
% Solve a parameter estimation problem for the PlateauSim_Opti model.
%
% The function returns estimated parameter values, pOpt,
% and estimation termination information, Info.
%
% The input argument, p, defines the model parameters to estimate,
% if omitted the parameters specified in the function body are estimated.
%
% Modify the function to include or exclude new experiments, or
% to change the estimation options.
%
% Auto-generated by SPETOOL on 18-Jan-2022 11:10:18.
%

%% Open the model.
open_system('PlateauSim_Opti')

%% Specify Model Parameters to Estimate
%
if nargin < 1
    p = [];
end

%% Define the Estimation Experiments
%

PlateauEst = sdo.Experiment('PlateauSim_Opti');

%%
% Specify the measured experiment output data.
PlateauEst_Sig_Output = Simulink.SimulationData.Signal;
PlateauEst_Sig_Output.Values    = Data;
PlateauEst_Sig_Output.BlockPath = 'PlateauSim_Opti/Add';
PlateauEst_Sig_Output.PortType  = 'outport';
PlateauEst_Sig_Output.PortIndex = 1;
PlateauEst_Sig_Output.Name      = 'Out1';
PlateauEst.OutputData = PlateauEst_Sig_Output;

%%
% Specify experiment specific parameters.
Param = sdo.getParameterFromModel('PlateauSim_Opti',{'MaxD','MaxN','kd','kn'});
Param(1).Value = 0.9928102673731591;
Param(1).Minimum = 0;
Param(1).Maximum = 1;
Param(2).Value = 0.9931780473244571;
Param(2).Minimum = 0;
Param(2).Maximum = 1;
Param(3).Value = 0.01897225357827002;
Param(3).Minimum = 0;
Param(3).Scale = 0.0625;
Param(4).Value = 0.01114837556982482;
Param(4).Minimum = 0;
PlateauEst.Parameters = Param;

%%
% Create a model simulator from an experiment
Simulator = createSimulator(PlateauEst);
%%
% Add experiment specific parameters/states to the list of parameters
% to estimate.
s = getValuesToEstimate(PlateauEst);
p = [p; s];

%% Create Estimation Objective Function
%
% Create a function that is called at each optimization iteration
% to compute the estimation cost.
%
% Use an anonymous function with one argument that calls PlateauSim_Opti_optFcn.
optimfcn = @(P) PlateauSim_Opti_optFcn(P,Simulator,PlateauEst);

%% Optimization Options
%
% Specify optimization options.
Options = sdo.OptimizeOptions;
Options.Method = 'lsqnonlin';
Options.OptimizedModel = Simulator;

%% Estimate the Parameters
%
% Call sdo.optimize with the estimation objective function handle,
% parameters to estimate, and options.
[pOpt,Info] = sdo.optimize(optimfcn,p,Options);

%%
% Update the experiments with the estimated parameter values.
PlateauEst = setEstimatedValues(PlateauEst,pOpt);

%% Update Model
%
% Update the model with the optimized parameter values.
sdo.setValueInModel('PlateauSim_Opti',pOpt(1:0));
end

function Vals = PlateauSim_Opti_optFcn(P,Simulator,PlateauEst)
%PLATEAUSIM_OPTI_OPTFCN
%
% Function called at each iteration of the estimation problem.
%
% The function is called with a set of parameter values, P, and returns
% the estimation cost, Vals, to the optimization solver.
%
% See the sdoExampleCostFunction function and sdo.optimize for a more
% detailed description of the function signature.
%

%%
% Define a signal tracking requirement to compute how well the model
% output matches the experiment data.
r = sdo.requirements.SignalTracking(...
    'Method', 'Residuals');
%%
% Update the experiment(s) with the estimated parameter values.
PlateauEst = setEstimatedValues(PlateauEst,P);

%%
% Simulate the model and compare model outputs with measured experiment
% data.

F_r = [];
Simulator = createSimulator(PlateauEst,Simulator);
strOT = mat2str(PlateauEst.OutputData(1).Values.Time);
Simulator = sim(Simulator, 'OutputOption', 'AdditionalOutputTimes', 'OutputTimes', strOT);

SimLog = find(Simulator.LoggedData,get_param('PlateauSim_Opti','SignalLoggingName'));
Sig = find(SimLog,PlateauEst.OutputData.Name);

Error = evalRequirement(r,Sig.Values,PlateauEst.OutputData.Values);
F_r = [F_r; Error(:)];

%% Return Values.
%
% Return the evaluated estimation cost in a structure to the
% optimization solver.
Vals.F = F_r;
end

function Data = getData(DataID)
%GETDATA
%
% Helper function to store data used by parameterEstimation_PlateauSim_Opti.
%
% The input, DataID, specifies the name of the data to retrieve. The output,
% Data, contains the requested data.
%

switch DataID
    case 'PlateauEst_Sig_Output_Value'
        t = [0;15;30;40;50;60;70;75;80;85;90;100;120;135;150;155;165;175;185;195;205];
        y = [-1.38777878078145e-17; 0.46355; 0.85515; 1.19; 1.36155; 1.65405; 1.7554;  ...
            1.8964; 1.96255; 2.0754; 2.09895; 2.1923; 2.1923; 2.69995; 2.82128333333333;  ...
            2.92395; 2.97595; 3.01695; 3.06695; 3.10428333333333; 3.16228333333333];
        Data = timeseries(y,t);
end
end
